load("@aspect_rules_lint//format:defs.bzl", "format_multirun")
load("@bazel_skylib//rules:native_binary.bzl", "native_binary")
load("@npm//:eslint/package_json.bzl", eslint_bin = "bin")
load("@npm//:prettier/package_json.bzl", prettier = "bin")

package(default_visibility = ["//visibility:public"])

eslint_bin.eslint_binary(name = "eslint")

prettier.prettier_binary(
    name = "prettier",
    data = [
        "//:prettierignore",
        "//:prettierrc",
    ],
    # Allow the binary to be run outside bazel
    env = {"BAZEL_BINDIR": "."},
    fixed_args = [
        # `require` statements in the config file will be resolved relative to its location
        # Therefore to make it hermetic, prettier must be pointed at the copy of the config file
        # in the runfiles folder rather than the one in the source folder.
        "--config=\"$$JS_BINARY__RUNFILES\"/$(rlocationpath //:prettierrc)",
        "--ignore-path=$(rlocationpath //:prettierignore)",
        "--log-level=warn",
    ],
)

native_binary(
    name = "yamlfmt_runner",
    src = "@multitool//tools/yamlfmt",
    args = [
        "-conf",
        "$(execpath //:yamlfmt.yml)",
        "-output_format",
        "default",
    ],
    data = [
        "//:gitignore",
        "//:yamlfmt.yml",
    ],
)

java_binary(
    name = "java-format",
    args = [
        "--set-exit-if-changed",
    ],
    jvm_flags = [
        "--add-exports jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
    ],
    main_class = "com.google.googlejavaformat.java.Main",
    runtime_deps = ["@google-java-format//jar"],
)

java_binary(
    name = "ktfmt",
    args = [
        "--set-exit-if-changed",
        "--meta-style",
    ],
    main_class = "com.facebook.ktfmt.cli.Main",
    runtime_deps = ["@ktfmt//jar"],
)

# `run`ing this target will format the entire repo
format_multirun(
    name = "format",
    css = ":prettier",
    html = ":prettier",
    java = ":java-format",
    javascript = ":prettier",
    kotlin = ":ktfmt",
    markdown = ":prettier",
    starlark = "@buildifier_prebuilt//:buildifier",
    yaml = ":yamlfmt_runner",
)
